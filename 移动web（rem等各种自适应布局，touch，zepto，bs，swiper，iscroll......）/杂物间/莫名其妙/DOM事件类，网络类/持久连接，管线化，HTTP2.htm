<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    * {
      margin: 0;
      padding: 0;
    }
    img {
      width: 50%;
      height: 50%;
      margin: 50px auto;
    }
  </style>
</head>
<body>

  <pre style="font-size: 15px; padding: 10px; line-height: 30px;">
    HTTP/1.0 在 1996 年发布，它增加了 HEAD、POST 等方法；增加了相应状态码，标记可能的错误原因；引入了协议版本号的概念；引入了 HTTP Header 的概念，让 HTTP 处理请求和响应更加灵活；
    传输的数据不再仅限于文本；HTTP/1.0 已经有现代 HTTP 的雏形了，但是随着互联网的发展，各种图片、音视频格式的出现，HTTP/1.0 显然已不能满足需求，同时还有短连接造成的巨大性能损耗，
    没多久，HTTP/1.1 发布，它增加了 PUT、DELETE 等新方法；增加了缓存管理和控制；支持长连接；允许响应数据分块；强制要求 Host 头部，让互联网主机托管成为可能；
    现在广泛使用的版本就是 HTTP/1.1，很难想象，这竟然是一个二十多年前的版本。HTTP 基于请求响应模型，这就导致应用层面的队头阻塞问题，同时并未对 Header 头部进行压缩，当携带大量头部数据，
    比如 Cookie 时，传输效率自然不堪。Google 率先发布了 SPDY 协议，后续 IETF 组织在 SPDY 协议的基础上，在 2015 年正式发布 HTTP/2，此时 HTTP 已经没有小版本号的概念了。HTTP/2 增加了多路复用；
    二进制分帧层，不再是纯文本；头部压缩 HPACK 算法；请求优先级；服务器推送；增强了安全性，“事实上”的加密通信；
    但是 HTTP/2 只是在应用层解决了由请求响应模型造成的队头阻塞问题，并未解决在传输层由于 TCP 必须保证资源的有序到达所带来的 TCP 队头阻塞问题，
    那该怎么办呢？那就把 TCP 换掉咯？HTTP/3 正是这样做的，HTTP/3 底层不在依赖于 TCP，而是 UDP。目前 HTTP/3 正处于草案阶段，
    它减少了 TCP 三次握手以及 TLS 握手时间；改进了拥塞控制；避免队头阻塞的多路复用；连接迁移；前向冗余纠错。
  </pre>

  <pre style="font-size: 15px; padding: 10px; line-height: 30px;">
HTTP2 有三个核心概念，Strem 流、Message 消息、Frame 帧。在一个 TCP 连接上可以有多个流，也就是并发多请求，实现多路复用；
以前浏览器是只能对一个域名开启 6 个并发链接；同时流还可以设置优先级，让服务器优先处理；一条流上可以有多个 Message 消息，
每个 Message 都可以携带多个 Frame 帧，帧类型包括 HEADER 帧和 DATA 帧，也就对应于 HTTP/1.1 中的 header 和 data。
在 HTTP/1.1 中，服务端是没法主动向客户端推送信息的，客户端只能以轮询的方式去请求，在 HTTP2 中有了服务器推送，也就是服务端可以提前将资源推送至浏览器缓存。

HTTP2 只在应用层解决了队头阻塞问题，并未在 TCP 层解决队头阻塞问题。TCP 的报文传输时无序，接收时组装。如果队头包没有到达，即使后序数据包已经接收到了也是没办法交给上层应用程序处理的，只能等待重发。
而在 HTTP3 采用了 UDP，UDP 先天没有队列的概念，自然就解决了队头阻塞的问题，但是它仍然保留了 TCP 的可靠性，这也需要 QUIC 协议自己去实现重传机制、拥塞控制等机制。
  </pre>


  <img src="./长连接，管线化，多路复用.png" alt="">
  <ul>
    <li>图中第一种请求方式，就是单次发送request请求，收到response后再进行下一次请求，显示是很低效的。</li>
    <li>于是http1.1提出了<strong>管线化(pipelining)技术</strong>，就是如图中第二中请求方式，<strong>一次性发送多个request</strong>请求。</li>
    <li>然而pipelining<span style="color: rgba(255, 0, 0, 1)">在接收response返回时，也必须依顺序接收，如果前一个请求遇到了阻塞，后面的请求即使已经处理完毕了，仍然需要等待阻塞的请求处理完毕。</span>这种情况就如图中第三种，第一个请求阻塞后，后面的请求都需要等待，这也就是队头阻塞(Head of line blocking)。</li>
    <li>为了解决上述阻塞问题，http2中提出了多路复用(Multiplexing)技术，Multiplexing是通信和计算机网络领域的专业名词。http2中<strong>将多个请求复用同一个tcp链接中</strong>，将一个TCP连接分为若干个流（Stream），每个流中可以传输若干消息（Message），每个消息由若干最小的二进制帧（Frame）组成。也就是将每个request-response拆分为了细小的二进制帧Frame，这样即使一个请求被阻塞了，也不会影响其他请求，如图中第四种情况所示。</li>
  </ul>


  <h2>TCP内容提一嘴</h2>
  <img src="./TCP3.jfif" alt="">
  <img src="./TCP33.jfif" alt="">
  <img src="./TCP4.jfif" alt="">
</body>
</html>